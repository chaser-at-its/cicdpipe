name: CI/CD

on:
  push:
    branches:
      - master

jobs:
  test:
  runs-on: ubuntu-18.04
  steps:
    - uses: actions/checkout@v2

    - name: Prepare test environment
    - run: |
      BUILD_CONTEXT="test" docker-compose -f docker-compose.yml -f .devcontainer/docker-compose.yml up -d
      docker-compose exec app rails db:setup

    - name: Run test
    - run: docker-compose exec app rspec

  build_and_push_image:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker-compose -f docker-compose.yml build

      - name: Login to registry
        env:
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: echo "${DOCKER_HUB_TOKEN}" | docker login -u tiwvstiw --password-stdin

      - name: Push image
        run: |
          docker push tiwvstiw/cicdpipe_web
          docker push tiwvstiw/cicdpipe_app

  deploy:
    needs: [test, build_and_push_image]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: Install ECS CLI
        run: |
          mkdir -p "$HOME/tools/ecs-cli"
          wget -N -O "$HOME/tools/ecs-cli/ecs-cli" "https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-v1.18.1"
          chmod +x "$HOME/tools/ecs-cli/ecs-cli"
          echo "::add-path::$HOME/tools/ecs-cli"

      - name: Configure ECS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          ecs-cli configure profile --profile-name main --access-key $AWS_ACCESS_KEY_ID --secret-key $AWS_SECRET_ACCESS_KEY
          ecs-cli configure --config-name main --cluster cl-main --region ap-northeast-1 --default-launch-type EC2

      - name: Render Task Definition
        run: |
          ecs-cli compose -f docker-compose.yml create --cluster-config main

      - name: Deploy Task Definition
        env:
          AWS_TARGET_GROUP_ARN: ${{ secrets.AWS_TARGET_GROUP_ARN }}
        run: |
          ecs-cli compose -f docker-compose.yml service up \
            --deployment-min-healthy-percent 0 --deployment-max-percent 100 \
            --target-group-arn $AWS_TARGET_GROUP_ARN \
            --container-name web --container-port 80 --timeout 10 --cluster-config main
